apply plugin: 'osgi'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'java-library'
apply plugin: 'maven-publish'

apply from: rootProject.file('gradle/license.gradle')

// pom file name
ext {
    ext.moduleName = 'com.jfoenix'
    pomFilePath = "${project.projectDir}/tmp/pom.xml"
    pomFile = file(pomFilePath)
}

configurations {
    pom
}

group = 'com.jfoenix'
version = '10.0'
description = 'material'

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

task sourcesJar(type: Jar) {
    group 'Build'
    description 'An archive of the source code'
    classifier 'sources'
    from sourceSets.main.allSource
}

javadoc {
    excludes = ['**/*.html', 'META-INF/**']

    options.use = true
    options.splitIndex = true
    options.encoding = 'UTF-8'
    options.author = true
    options.version = true
    options.windowTitle = "$project.name $project.version API"
    options.docTitle = "$project.name $project.version API"
    options.links = ['http://docs.oracle.com/javase/9/docs/api/',
                     'http://docs.oracle.com/javase/9/javafx/api/']
}

task myJavadocs(type: Javadoc) {
    source = sourceSets.main.allJava
    options.addMultilineStringsOption("-add-exports")
        .setValue(["javafx.base/com.sun.javafx.event=com.jfoenix",
                   "javafx.base/com.sun.javafx.binding=com.jfoenix",
                   "javafx.graphics/com.sun.javafx.scene=com.jfoenix",
                   "javafx.graphics/com.sun.javafx.scene.text=com.jfoenix",
                   "javafx.graphics/com.sun.javafx.stage=com.jfoenix",
                   "javafx.graphics/com.sun.javafx.geom=com.jfoenix",
                   "javafx.graphics/com.sun.javafx.util=com.jfoenix",
                   "javafx.graphics/com.sun.javafx.scene.traversal=com.jfoenix",
                   "javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix",
                   "javafx.controls/com.sun.javafx.scene.control.inputmap=com.jfoenix",
                   "javafx.controls/com.sun.javafx.scene.control=com.jfoenix"])
}

task javadocJar(type: Jar) {
    group 'Build'
    description 'An archive of the javadoc'
    classifier 'javadoc'
    from javadoc.destinationDir
}
javadocJar.dependsOn myJavadocs

// execute jar tasks
jar.finalizedBy sourcesJar
jar.finalizedBy javadocJar

// summarize artifacts
artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
    if (pomFile.exists()) {
        pom pomFile
    }
}

jar {
    exclude('com/jfoenix/android/**')

    manifest {
        name = 'JFoenix'
        instruction 'Bundle-RequiredExecutionEnvironment', 'JavaSE-1.9'
        instruction 'Bundle-Description', 'JavaFX Material Design Library'
    }
}
